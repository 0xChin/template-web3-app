// Generated by @wagmi/cli@1.1.0 on 7/20/2023 at 4:46:57â€¯PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ui-pool-data-provider
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uiPoolDataProviderABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_networkBaseTokenPriceInUsdProxyAggregator', internalType: 'contract IChainlinkAggregator', type: 'address' },
      { name: '_marketReferenceCurrencyPriceInUsdProxyAggregator', internalType: 'contract IChainlinkAggregator', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ETH_CURRENCY_UNIT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'provider', internalType: 'contract ILendingPoolAddressesProvider', type: 'address' }],
    name: 'getReservesData',
    outputs: [
      {
        name: '',
        internalType: 'struct IUiPoolDataProvider.AggregatedReserveData[]',
        type: 'tuple[]',
        components: [
          { name: 'underlyingAsset', internalType: 'address', type: 'address' },
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'symbol', internalType: 'string', type: 'string' },
          { name: 'decimals', internalType: 'uint256', type: 'uint256' },
          { name: 'baseLTVasCollateral', internalType: 'uint256', type: 'uint256' },
          { name: 'reserveLiquidationThreshold', internalType: 'uint256', type: 'uint256' },
          { name: 'reserveLiquidationBonus', internalType: 'uint256', type: 'uint256' },
          { name: 'reserveFactor', internalType: 'uint256', type: 'uint256' },
          { name: 'usageAsCollateralEnabled', internalType: 'bool', type: 'bool' },
          { name: 'borrowingEnabled', internalType: 'bool', type: 'bool' },
          { name: 'stableBorrowRateEnabled', internalType: 'bool', type: 'bool' },
          { name: 'isActive', internalType: 'bool', type: 'bool' },
          { name: 'isFrozen', internalType: 'bool', type: 'bool' },
          { name: 'liquidityIndex', internalType: 'uint128', type: 'uint128' },
          { name: 'variableBorrowIndex', internalType: 'uint128', type: 'uint128' },
          { name: 'liquidityRate', internalType: 'uint128', type: 'uint128' },
          { name: 'variableBorrowRate', internalType: 'uint128', type: 'uint128' },
          { name: 'stableBorrowRate', internalType: 'uint128', type: 'uint128' },
          { name: 'lastUpdateTimestamp', internalType: 'uint40', type: 'uint40' },
          { name: 'aTokenAddress', internalType: 'address', type: 'address' },
          { name: 'stableDebtTokenAddress', internalType: 'address', type: 'address' },
          { name: 'variableDebtTokenAddress', internalType: 'address', type: 'address' },
          { name: 'interestRateStrategyAddress', internalType: 'address', type: 'address' },
          { name: 'availableLiquidity', internalType: 'uint256', type: 'uint256' },
          { name: 'totalPrincipalStableDebt', internalType: 'uint256', type: 'uint256' },
          { name: 'averageStableRate', internalType: 'uint256', type: 'uint256' },
          { name: 'stableDebtLastUpdateTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'totalScaledVariableDebt', internalType: 'uint256', type: 'uint256' },
          { name: 'priceInMarketReferenceCurrency', internalType: 'uint256', type: 'uint256' },
          { name: 'variableRateSlope1', internalType: 'uint256', type: 'uint256' },
          { name: 'variableRateSlope2', internalType: 'uint256', type: 'uint256' },
          { name: 'stableRateSlope1', internalType: 'uint256', type: 'uint256' },
          { name: 'stableRateSlope2', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: '',
        internalType: 'struct IUiPoolDataProvider.BaseCurrencyInfo',
        type: 'tuple',
        components: [
          { name: 'marketReferenceCurrencyUnit', internalType: 'uint256', type: 'uint256' },
          { name: 'marketReferenceCurrencyPriceInUsd', internalType: 'int256', type: 'int256' },
          { name: 'networkBaseTokenPriceInUsd', internalType: 'int256', type: 'int256' },
          { name: 'networkBaseTokenPriceDecimals', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'provider', internalType: 'contract ILendingPoolAddressesProvider', type: 'address' }],
    name: 'getReservesList',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'provider', internalType: 'contract ILendingPoolAddressesProvider', type: 'address' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'getUserReservesData',
    outputs: [
      {
        name: '',
        internalType: 'struct IUiPoolDataProvider.UserReserveData[]',
        type: 'tuple[]',
        components: [
          { name: 'underlyingAsset', internalType: 'address', type: 'address' },
          { name: 'scaledATokenBalance', internalType: 'uint256', type: 'uint256' },
          { name: 'usageAsCollateralEnabledOnUser', internalType: 'bool', type: 'bool' },
          { name: 'stableBorrowRate', internalType: 'uint256', type: 'uint256' },
          { name: 'scaledVariableDebt', internalType: 'uint256', type: 'uint256' },
          { name: 'principalStableDebt', internalType: 'uint256', type: 'uint256' },
          { name: 'stableBorrowLastUpdateTimestamp', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erc-20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc_20ABI = [
  { constant: true, payable: false, stateMutability: 'view', type: 'function', inputs: [], name: 'name', outputs: [{ name: '', type: 'string' }] },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_spender', type: 'address' },
      { name: '_value', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: 'success', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', type: 'address' },
      { name: '_to', type: 'address' },
      { name: '_value', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: 'success', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', type: 'address' }],
    name: 'balances',
    outputs: [{ name: '', type: 'uint256' }],
  },
  { constant: true, payable: false, stateMutability: 'view', type: 'function', inputs: [], name: 'decimals', outputs: [{ name: '', type: 'uint8' }] },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', type: 'address' },
      { name: '', type: 'address' },
    ],
    name: 'allowed',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_owner', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', type: 'uint256' }],
  },
  { constant: true, payable: false, stateMutability: 'view', type: 'function', inputs: [], name: 'symbol', outputs: [{ name: '', type: 'string' }] },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', type: 'address' },
      { name: '_value', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: 'success', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_owner', type: 'address' },
      { name: '_spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: 'remaining', type: 'uint256' }],
  },
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_initialAmount', type: 'uint256' },
      { name: '_tokenName', type: 'string' },
      { name: '_decimalUnits', type: 'uint8' },
      { name: '_tokenSymbol', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_from', type: 'address', indexed: true },
      { name: '_to', type: 'address', indexed: true },
      { name: '_value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_owner', type: 'address', indexed: true },
      { name: '_spender', type: 'address', indexed: true },
      { name: '_value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uiPoolDataProviderABI}__.
 */
export function useUiPoolDataProviderRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof uiPoolDataProviderABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof uiPoolDataProviderABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: uiPoolDataProviderABI, ...config } as UseContractReadConfig<typeof uiPoolDataProviderABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uiPoolDataProviderABI}__ and `functionName` set to `"ETH_CURRENCY_UNIT"`.
 */
export function useUiPoolDataProviderEthCurrencyUnit<
  TFunctionName extends 'ETH_CURRENCY_UNIT',
  TSelectData = ReadContractResult<typeof uiPoolDataProviderABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof uiPoolDataProviderABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: uiPoolDataProviderABI, functionName: 'ETH_CURRENCY_UNIT', ...config } as UseContractReadConfig<
    typeof uiPoolDataProviderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uiPoolDataProviderABI}__ and `functionName` set to `"getReservesData"`.
 */
export function useUiPoolDataProviderGetReservesData<
  TFunctionName extends 'getReservesData',
  TSelectData = ReadContractResult<typeof uiPoolDataProviderABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof uiPoolDataProviderABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: uiPoolDataProviderABI, functionName: 'getReservesData', ...config } as UseContractReadConfig<
    typeof uiPoolDataProviderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uiPoolDataProviderABI}__ and `functionName` set to `"getReservesList"`.
 */
export function useUiPoolDataProviderGetReservesList<
  TFunctionName extends 'getReservesList',
  TSelectData = ReadContractResult<typeof uiPoolDataProviderABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof uiPoolDataProviderABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: uiPoolDataProviderABI, functionName: 'getReservesList', ...config } as UseContractReadConfig<
    typeof uiPoolDataProviderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uiPoolDataProviderABI}__ and `functionName` set to `"getUserReservesData"`.
 */
export function useUiPoolDataProviderGetUserReservesData<
  TFunctionName extends 'getUserReservesData',
  TSelectData = ReadContractResult<typeof uiPoolDataProviderABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof uiPoolDataProviderABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: uiPoolDataProviderABI, functionName: 'getUserReservesData', ...config } as UseContractReadConfig<
    typeof uiPoolDataProviderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc_20ABI}__.
 */
export function useErc_20Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof erc_20ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc_20ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: erc_20ABI, ...config } as UseContractReadConfig<typeof erc_20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc_20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc_20Name<TFunctionName extends 'name', TSelectData = ReadContractResult<typeof erc_20ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc_20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc_20ABI, functionName: 'name', ...config } as UseContractReadConfig<typeof erc_20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc_20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc_20TotalSupply<TFunctionName extends 'totalSupply', TSelectData = ReadContractResult<typeof erc_20ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc_20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc_20ABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof erc_20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc_20ABI}__ and `functionName` set to `"balances"`.
 */
export function useErc_20Balances<TFunctionName extends 'balances', TSelectData = ReadContractResult<typeof erc_20ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc_20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc_20ABI, functionName: 'balances', ...config } as UseContractReadConfig<
    typeof erc_20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc_20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc_20Decimals<TFunctionName extends 'decimals', TSelectData = ReadContractResult<typeof erc_20ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc_20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc_20ABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof erc_20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc_20ABI}__ and `functionName` set to `"allowed"`.
 */
export function useErc_20Allowed<TFunctionName extends 'allowed', TSelectData = ReadContractResult<typeof erc_20ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc_20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc_20ABI, functionName: 'allowed', ...config } as UseContractReadConfig<
    typeof erc_20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc_20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc_20BalanceOf<TFunctionName extends 'balanceOf', TSelectData = ReadContractResult<typeof erc_20ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc_20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc_20ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc_20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc_20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc_20Symbol<TFunctionName extends 'symbol', TSelectData = ReadContractResult<typeof erc_20ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc_20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc_20ABI, functionName: 'symbol', ...config } as UseContractReadConfig<typeof erc_20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc_20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc_20Allowance<TFunctionName extends 'allowance', TSelectData = ReadContractResult<typeof erc_20ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc_20ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc_20ABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof erc_20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc_20ABI}__.
 */
export function useErc_20Write<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc_20ABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof erc_20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof erc_20ABI, TFunctionName, TMode>({ abi: erc_20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc_20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc_20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc_20ABI, 'approve'>['request']['abi'], 'approve', TMode> & {
        functionName?: 'approve'
      }
    : UseContractWriteConfig<typeof erc_20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof erc_20ABI, 'approve', TMode>({ abi: erc_20ABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc_20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc_20TransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc_20ABI, 'transferFrom'>['request']['abi'], 'transferFrom', TMode> & {
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<typeof erc_20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc_20ABI, 'transferFrom', TMode>({ abi: erc_20ABI, functionName: 'transferFrom', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc_20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc_20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc_20ABI, 'transfer'>['request']['abi'], 'transfer', TMode> & {
        functionName?: 'transfer'
      }
    : UseContractWriteConfig<typeof erc_20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof erc_20ABI, 'transfer', TMode>({ abi: erc_20ABI, functionName: 'transfer', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc_20ABI}__.
 */
export function usePrepareErc_20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc_20ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc_20ABI, ...config } as UsePrepareContractWriteConfig<typeof erc_20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc_20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc_20Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof erc_20ABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc_20ABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<typeof erc_20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc_20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc_20TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc_20ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc_20ABI, functionName: 'transferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof erc_20ABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc_20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc_20Transfer(
  config: Omit<UsePrepareContractWriteConfig<typeof erc_20ABI, 'transfer'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc_20ABI, functionName: 'transfer', ...config } as UsePrepareContractWriteConfig<
    typeof erc_20ABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc_20ABI}__.
 */
export function useErc_20Event<TEventName extends string>(config: Omit<UseContractEventConfig<typeof erc_20ABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: erc_20ABI, ...config } as UseContractEventConfig<typeof erc_20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc_20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc_20TransferEvent(config: Omit<UseContractEventConfig<typeof erc_20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: erc_20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<typeof erc_20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc_20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc_20ApprovalEvent(config: Omit<UseContractEventConfig<typeof erc_20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: erc_20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<typeof erc_20ABI, 'Approval'>)
}
